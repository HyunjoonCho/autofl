[
    {
        "name": "test.helper.get_params#18",
        "src_path": "test/helper.py",
        "class_name": "test.helper",
        "signature": "test.helper.get_params(override=None)",
        "snippet": "def get_params(override=None):\n    PARAMETERS_FILE = os.path.join(os.path.dirname(os.path.abspath(__file__)),\n                                   \"parameters.json\")\n    with io.open(PARAMETERS_FILE, encoding='utf-8') as pf:\n        parameters = json.load(pf)\n    if override:\n        parameters.update(override)\n    return parameters",
        "begin_line": 18,
        "end_line": 25,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helper.try_rm#28",
        "src_path": "test/helper.py",
        "class_name": "test.helper",
        "signature": "test.helper.try_rm(filename)",
        "snippet": "def try_rm(filename):\n    \"\"\" Remove a file if it exists \"\"\"\n    try:\n        os.remove(filename)\n    except OSError as ose:\n        if ose.errno != errno.ENOENT:\n            raise",
        "begin_line": 28,
        "end_line": 34,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helper.report_warning#37",
        "src_path": "test/helper.py",
        "class_name": "test.helper",
        "signature": "test.helper.report_warning(message)",
        "snippet": "def report_warning(message):\n    '''\n    Print the message to stderr, it will be prefixed with 'WARNING:'\n    If stderr is a tty file the 'WARNING:' will be colored\n    '''\n    if sys.stderr.isatty() and os.name != 'nt':\n        _msg_header = u'\\033[0;33mWARNING:\\033[0m'\n    else:\n        _msg_header = u'WARNING:'\n    output = u'%s %s\\n' % (_msg_header, message)\n    if 'b' in getattr(sys.stderr, 'mode', '') or sys.version_info[0] < 3:\n        output = output.encode(preferredencoding())\n    sys.stderr.write(output)",
        "begin_line": 37,
        "end_line": 49,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helper.FakeYDL.__init__#53",
        "src_path": "test/helper.py",
        "class_name": "test.helper.FakeYDL",
        "signature": "test.helper.FakeYDL.__init__(self, override=None)",
        "snippet": "    def __init__(self, override=None):\n        # Different instances of the downloader can't share the same dictionary\n        # some test set the \"sublang\" parameter, which would break the md5 checks.\n        params = get_params(override=override)\n        super(FakeYDL, self).__init__(params)\n        self.result = []",
        "begin_line": 53,
        "end_line": 58,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helper.FakeYDL.to_screen#60",
        "src_path": "test/helper.py",
        "class_name": "test.helper.FakeYDL",
        "signature": "test.helper.FakeYDL.to_screen(self, s, skip_eol=None)",
        "snippet": "    def to_screen(self, s, skip_eol=None):\n        print(s)",
        "begin_line": 60,
        "end_line": 61,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helper.FakeYDL.trouble#63",
        "src_path": "test/helper.py",
        "class_name": "test.helper.FakeYDL",
        "signature": "test.helper.FakeYDL.trouble(self, s, tb=None)",
        "snippet": "    def trouble(self, s, tb=None):\n        raise Exception(s)",
        "begin_line": 63,
        "end_line": 64,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helper.FakeYDL.download#66",
        "src_path": "test/helper.py",
        "class_name": "test.helper.FakeYDL",
        "signature": "test.helper.FakeYDL.download(self, x)",
        "snippet": "    def download(self, x):\n        self.result.append(x)",
        "begin_line": 66,
        "end_line": 67,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helper.FakeYDL.expect_warning#69",
        "src_path": "test/helper.py",
        "class_name": "test.helper.FakeYDL",
        "signature": "test.helper.FakeYDL.expect_warning(self, regex)",
        "snippet": "    def expect_warning(self, regex):\n        # Silence an expected warning matching a regex\n        old_report_warning = self.report_warning\n        def report_warning(self, message):\n            if re.match(regex, message): return\n            old_report_warning(message)\n        self.report_warning = types.MethodType(report_warning, self)",
        "begin_line": 69,
        "end_line": 75,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helper.gettestcases#78",
        "src_path": "test/helper.py",
        "class_name": "test.helper",
        "signature": "test.helper.gettestcases(include_onlymatching=False)",
        "snippet": "def gettestcases(include_onlymatching=False):\n    for ie in youtube_dl.extractor.gen_extractors():\n        t = getattr(ie, '_TEST', None)\n        if t:\n            assert not hasattr(ie, '_TESTS'), \\\n                '%s has _TEST and _TESTS' % type(ie).__name__\n            tests = [t]\n        else:\n            tests = getattr(ie, '_TESTS', [])\n        for t in tests:\n            if not include_onlymatching and t.get('only_matching', False):\n                continue\n            t['name'] = type(ie).__name__[:-len('IE')]\n            yield t",
        "begin_line": 78,
        "end_line": 91,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helper.expect_info_dict#97",
        "src_path": "test/helper.py",
        "class_name": "test.helper",
        "signature": "test.helper.expect_info_dict(self, expected_dict, got_dict)",
        "snippet": "def expect_info_dict(self, expected_dict, got_dict):\n    for info_field, expected in expected_dict.items():\n        if isinstance(expected, compat_str) and expected.startswith('re:'):\n            got = got_dict.get(info_field)\n            match_str = expected[len('re:'):]\n            match_rex = re.compile(match_str)\n\n            self.assertTrue(\n                isinstance(got, compat_str) and match_rex.match(got),\n                u'field %s (value: %r) should match %r' % (info_field, got, match_str))\n        elif isinstance(expected, type):\n            got = got_dict.get(info_field)\n            self.assertTrue(isinstance(got, expected),\n                u'Expected type %r for field %s, but got value %r of type %r' % (expected, info_field, got, type(got)))\n        else:\n            if isinstance(expected, compat_str) and expected.startswith('md5:'):\n                got = 'md5:' + md5(got_dict.get(info_field))\n            else:\n                got = got_dict.get(info_field)\n            self.assertEqual(expected, got,\n                u'invalid value for field %s, expected %r, got %r' % (info_field, expected, got))\n\n    # Check for the presence of mandatory fields\n    for key in ('id', 'url', 'title', 'ext'):\n        self.assertTrue(got_dict.get(key), 'Missing mandatory field %s' % key)\n    # Check for mandatory fields that are automatically set by YoutubeDL\n    for key in ['webpage_url', 'extractor', 'extractor_key']:\n        self.assertTrue(got_dict.get(key), u'Missing field: %s' % key)\n\n    # Are checkable fields missing from the test case definition?\n    test_info_dict = dict((key, value if not isinstance(value, compat_str) or len(value) < 250 else 'md5:' + md5(value))\n        for key, value in got_dict.items()\n        if value and key in ('title', 'description', 'uploader', 'upload_date', 'timestamp', 'uploader_id', 'location'))\n    missing_keys = set(test_info_dict.keys()) - set(expected_dict.keys())\n    if missing_keys:\n        sys.stderr.write(u'\\n\"info_dict\": ' + json.dumps(test_info_dict, ensure_ascii=False, indent=4) + u'\\n')\n        self.assertFalse(\n            missing_keys,\n            'Missing keys in test definition: %s' % (\n                ', '.join(sorted(missing_keys))))",
        "begin_line": 97,
        "end_line": 136,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helper.assertRegexpMatches#139",
        "src_path": "test/helper.py",
        "class_name": "test.helper",
        "signature": "test.helper.assertRegexpMatches(self, text, regexp, msg=None)",
        "snippet": "def assertRegexpMatches(self, text, regexp, msg=None):\n    if hasattr(self, 'assertRegexp'):\n        return self.assertRegexp(text, regexp, msg)\n    else:\n        m = re.match(regexp, text)\n        if not m:\n            note = 'Regexp didn\\'t match: %r not found in %r' % (regexp, text)\n            if msg is None:\n                msg = note\n            else:\n                msg = note + ', ' + msg\n            self.assertTrue(m, msg)",
        "begin_line": 139,
        "end_line": 150,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helper.assertGreaterEqual#153",
        "src_path": "test/helper.py",
        "class_name": "test.helper",
        "signature": "test.helper.assertGreaterEqual(self, got, expected, msg=None)",
        "snippet": "def assertGreaterEqual(self, got, expected, msg=None):\n    if not (got >= expected):\n        if msg is None:\n            msg = '%r not greater than or equal to %r' % (got, expected)\n        self.assertTrue(got >= expected, msg)",
        "begin_line": 153,
        "end_line": 157,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_all_urls.TestAllURLsMatching.setUp#23",
        "src_path": "test/test_all_urls.py",
        "class_name": "test.test_all_urls.TestAllURLsMatching",
        "signature": "test.test_all_urls.TestAllURLsMatching.setUp(self)",
        "snippet": "    def setUp(self):\n        self.ies = gen_extractors()",
        "begin_line": 23,
        "end_line": 24,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_all_urls.TestAllURLsMatching.matching_ies#26",
        "src_path": "test/test_all_urls.py",
        "class_name": "test.test_all_urls.TestAllURLsMatching",
        "signature": "test.test_all_urls.TestAllURLsMatching.matching_ies(self, url)",
        "snippet": "    def matching_ies(self, url):\n        return [ie.IE_NAME for ie in self.ies if ie.suitable(url) and ie.IE_NAME != 'generic']",
        "begin_line": 26,
        "end_line": 27,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_all_urls.TestAllURLsMatching.assertMatch#29",
        "src_path": "test/test_all_urls.py",
        "class_name": "test.test_all_urls.TestAllURLsMatching",
        "signature": "test.test_all_urls.TestAllURLsMatching.assertMatch(self, url, ie_list)",
        "snippet": "    def assertMatch(self, url, ie_list):\n        self.assertEqual(self.matching_ies(url), ie_list)",
        "begin_line": 29,
        "end_line": 30,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_all_urls.TestAllURLsMatching.test_youtube_playlist_matching#32",
        "src_path": "test/test_all_urls.py",
        "class_name": "test.test_all_urls.TestAllURLsMatching",
        "signature": "test.test_all_urls.TestAllURLsMatching.test_youtube_playlist_matching(self)",
        "snippet": "    def test_youtube_playlist_matching(self):\n        assertPlaylist = lambda url: self.assertMatch(url, ['youtube:playlist'])\n        assertPlaylist('ECUl4u3cNGP61MdtwGTqZA0MreSaDybji8')\n        assertPlaylist('UUBABnxM4Ar9ten8Mdjj1j0Q') #585\n        assertPlaylist('PL63F0C78739B09958')\n        assertPlaylist('https://www.youtube.com/playlist?list=UUBABnxM4Ar9ten8Mdjj1j0Q')\n        assertPlaylist('https://www.youtube.com/course?list=ECUl4u3cNGP61MdtwGTqZA0MreSaDybji8')\n        assertPlaylist('https://www.youtube.com/playlist?list=PLwP_SiAcdui0KVebT0mU9Apz359a4ubsC')\n        assertPlaylist('https://www.youtube.com/watch?v=AV6J6_AeFEQ&playnext=1&list=PL4023E734DA416012') #668\n        self.assertFalse('youtube:playlist' in self.matching_ies('PLtS2H6bU1M'))\n        # Top tracks\n        assertPlaylist('https://www.youtube.com/playlist?list=MCUS.20142101')",
        "begin_line": 32,
        "end_line": 43,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_all_urls.TestAllURLsMatching.test_youtube_matching#45",
        "src_path": "test/test_all_urls.py",
        "class_name": "test.test_all_urls.TestAllURLsMatching",
        "signature": "test.test_all_urls.TestAllURLsMatching.test_youtube_matching(self)",
        "snippet": "    def test_youtube_matching(self):\n        self.assertTrue(YoutubeIE.suitable('PLtS2H6bU1M'))\n        self.assertFalse(YoutubeIE.suitable('https://www.youtube.com/watch?v=AV6J6_AeFEQ&playnext=1&list=PL4023E734DA416012')) #668\n        self.assertMatch('http://youtu.be/BaW_jenozKc', ['youtube'])\n        self.assertMatch('http://www.youtube.com/v/BaW_jenozKc', ['youtube'])\n        self.assertMatch('https://youtube.googleapis.com/v/BaW_jenozKc', ['youtube'])\n        self.assertMatch('http://www.cleanvideosearch.com/media/action/yt/watch?videoId=8v_4O44sfjM', ['youtube'])",
        "begin_line": 45,
        "end_line": 51,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_all_urls.TestAllURLsMatching.test_youtube_channel_matching#53",
        "src_path": "test/test_all_urls.py",
        "class_name": "test.test_all_urls.TestAllURLsMatching",
        "signature": "test.test_all_urls.TestAllURLsMatching.test_youtube_channel_matching(self)",
        "snippet": "    def test_youtube_channel_matching(self):\n        assertChannel = lambda url: self.assertMatch(url, ['youtube:channel'])\n        assertChannel('https://www.youtube.com/channel/HCtnHdj3df7iM')\n        assertChannel('https://www.youtube.com/channel/HCtnHdj3df7iM?feature=gb_ch_rec')\n        assertChannel('https://www.youtube.com/channel/HCtnHdj3df7iM/videos')",
        "begin_line": 53,
        "end_line": 57,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_all_urls.TestAllURLsMatching.test_youtube_user_matching#59",
        "src_path": "test/test_all_urls.py",
        "class_name": "test.test_all_urls.TestAllURLsMatching",
        "signature": "test.test_all_urls.TestAllURLsMatching.test_youtube_user_matching(self)",
        "snippet": "    def test_youtube_user_matching(self):\n        self.assertMatch('www.youtube.com/NASAgovVideo/videos', ['youtube:user'])",
        "begin_line": 59,
        "end_line": 60,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_all_urls.TestAllURLsMatching.test_youtube_feeds#62",
        "src_path": "test/test_all_urls.py",
        "class_name": "test.test_all_urls.TestAllURLsMatching",
        "signature": "test.test_all_urls.TestAllURLsMatching.test_youtube_feeds(self)",
        "snippet": "    def test_youtube_feeds(self):\n        self.assertMatch('https://www.youtube.com/feed/watch_later', ['youtube:watch_later'])\n        self.assertMatch('https://www.youtube.com/feed/subscriptions', ['youtube:subscriptions'])\n        self.assertMatch('https://www.youtube.com/feed/recommended', ['youtube:recommended'])\n        self.assertMatch('https://www.youtube.com/my_favorites', ['youtube:favorites'])",
        "begin_line": 62,
        "end_line": 66,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_all_urls.TestAllURLsMatching.test_youtube_show_matching#68",
        "src_path": "test/test_all_urls.py",
        "class_name": "test.test_all_urls.TestAllURLsMatching",
        "signature": "test.test_all_urls.TestAllURLsMatching.test_youtube_show_matching(self)",
        "snippet": "    def test_youtube_show_matching(self):\n        self.assertMatch('http://www.youtube.com/show/airdisasters', ['youtube:show'])",
        "begin_line": 68,
        "end_line": 69,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_all_urls.TestAllURLsMatching.test_youtube_search_matching#71",
        "src_path": "test/test_all_urls.py",
        "class_name": "test.test_all_urls.TestAllURLsMatching",
        "signature": "test.test_all_urls.TestAllURLsMatching.test_youtube_search_matching(self)",
        "snippet": "    def test_youtube_search_matching(self):\n        self.assertMatch('http://www.youtube.com/results?search_query=making+mustard', ['youtube:search_url'])\n        self.assertMatch('https://www.youtube.com/results?baz=bar&search_query=youtube-dl+test+video&filters=video&lclk=video', ['youtube:search_url'])",
        "begin_line": 71,
        "end_line": 73,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_all_urls.TestAllURLsMatching.test_justin_tv_channelid_matching#75",
        "src_path": "test/test_all_urls.py",
        "class_name": "test.test_all_urls.TestAllURLsMatching",
        "signature": "test.test_all_urls.TestAllURLsMatching.test_justin_tv_channelid_matching(self)",
        "snippet": "    def test_justin_tv_channelid_matching(self):\n        self.assertTrue(JustinTVIE.suitable('justin.tv/vanillatv'))\n        self.assertTrue(JustinTVIE.suitable('twitch.tv/vanillatv'))\n        self.assertTrue(JustinTVIE.suitable('www.justin.tv/vanillatv'))\n        self.assertTrue(JustinTVIE.suitable('www.twitch.tv/vanillatv'))\n        self.assertTrue(JustinTVIE.suitable('http://www.justin.tv/vanillatv'))\n        self.assertTrue(JustinTVIE.suitable('http://www.twitch.tv/vanillatv'))\n        self.assertTrue(JustinTVIE.suitable('http://www.justin.tv/vanillatv/'))\n        self.assertTrue(JustinTVIE.suitable('http://www.twitch.tv/vanillatv/'))",
        "begin_line": 75,
        "end_line": 83,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_all_urls.TestAllURLsMatching.test_justintv_videoid_matching#85",
        "src_path": "test/test_all_urls.py",
        "class_name": "test.test_all_urls.TestAllURLsMatching",
        "signature": "test.test_all_urls.TestAllURLsMatching.test_justintv_videoid_matching(self)",
        "snippet": "    def test_justintv_videoid_matching(self):\n        self.assertTrue(JustinTVIE.suitable('http://www.twitch.tv/vanillatv/b/328087483'))",
        "begin_line": 85,
        "end_line": 86,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_all_urls.TestAllURLsMatching.test_justin_tv_chapterid_matching#88",
        "src_path": "test/test_all_urls.py",
        "class_name": "test.test_all_urls.TestAllURLsMatching",
        "signature": "test.test_all_urls.TestAllURLsMatching.test_justin_tv_chapterid_matching(self)",
        "snippet": "    def test_justin_tv_chapterid_matching(self):\n        self.assertTrue(JustinTVIE.suitable('http://www.twitch.tv/tsm_theoddone/c/2349361'))",
        "begin_line": 88,
        "end_line": 89,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_all_urls.TestAllURLsMatching.test_youtube_extract#91",
        "src_path": "test/test_all_urls.py",
        "class_name": "test.test_all_urls.TestAllURLsMatching",
        "signature": "test.test_all_urls.TestAllURLsMatching.test_youtube_extract(self)",
        "snippet": "    def test_youtube_extract(self):\n        assertExtractId = lambda url, id: self.assertEqual(YoutubeIE.extract_id(url), id)\n        assertExtractId('http://www.youtube.com/watch?&v=BaW_jenozKc', 'BaW_jenozKc')\n        assertExtractId('https://www.youtube.com/watch?&v=BaW_jenozKc', 'BaW_jenozKc')\n        assertExtractId('https://www.youtube.com/watch?feature=player_embedded&v=BaW_jenozKc', 'BaW_jenozKc')\n        assertExtractId('https://www.youtube.com/watch_popup?v=BaW_jenozKc', 'BaW_jenozKc')\n        assertExtractId('http://www.youtube.com/watch?v=BaW_jenozKcsharePLED17F32AD9753930', 'BaW_jenozKc')\n        assertExtractId('BaW_jenozKc', 'BaW_jenozKc')",
        "begin_line": 91,
        "end_line": 98,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_all_urls.TestAllURLsMatching.test_facebook_matching#100",
        "src_path": "test/test_all_urls.py",
        "class_name": "test.test_all_urls.TestAllURLsMatching",
        "signature": "test.test_all_urls.TestAllURLsMatching.test_facebook_matching(self)",
        "snippet": "    def test_facebook_matching(self):\n        self.assertTrue(FacebookIE.suitable('https://www.facebook.com/Shiniknoh#!/photo.php?v=10153317450565268'))\n        self.assertTrue(FacebookIE.suitable('https://www.facebook.com/cindyweather?fref=ts#!/photo.php?v=10152183998945793'))",
        "begin_line": 100,
        "end_line": 102,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_all_urls.TestAllURLsMatching.test_no_duplicates#104",
        "src_path": "test/test_all_urls.py",
        "class_name": "test.test_all_urls.TestAllURLsMatching",
        "signature": "test.test_all_urls.TestAllURLsMatching.test_no_duplicates(self)",
        "snippet": "    def test_no_duplicates(self):\n        ies = gen_extractors()\n        for tc in gettestcases(include_onlymatching=True):\n            url = tc['url']\n            for ie in ies:\n                if type(ie).__name__ in ('GenericIE', tc['name'] + 'IE'):\n                    self.assertTrue(ie.suitable(url), '%s should match URL %r' % (type(ie).__name__, url))\n                else:\n                    self.assertFalse(ie.suitable(url), '%s should not match URL %r' % (type(ie).__name__, url))",
        "begin_line": 104,
        "end_line": 112,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_all_urls.TestAllURLsMatching.test_keywords#114",
        "src_path": "test/test_all_urls.py",
        "class_name": "test.test_all_urls.TestAllURLsMatching",
        "signature": "test.test_all_urls.TestAllURLsMatching.test_keywords(self)",
        "snippet": "    def test_keywords(self):\n        self.assertMatch(':ytsubs', ['youtube:subscriptions'])\n        self.assertMatch(':ytsubscriptions', ['youtube:subscriptions'])\n        self.assertMatch(':ythistory', ['youtube:history'])\n        self.assertMatch(':thedailyshow', ['ComedyCentralShows'])\n        self.assertMatch(':tds', ['ComedyCentralShows'])\n        self.assertMatch(':colbertreport', ['ComedyCentralShows'])\n        self.assertMatch(':cr', ['ComedyCentralShows'])",
        "begin_line": 114,
        "end_line": 121,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_all_urls.TestAllURLsMatching.test_vimeo_matching#123",
        "src_path": "test/test_all_urls.py",
        "class_name": "test.test_all_urls.TestAllURLsMatching",
        "signature": "test.test_all_urls.TestAllURLsMatching.test_vimeo_matching(self)",
        "snippet": "    def test_vimeo_matching(self):\n        self.assertMatch('http://vimeo.com/channels/tributes', ['vimeo:channel'])\n        self.assertMatch('http://vimeo.com/channels/31259', ['vimeo:channel'])\n        self.assertMatch('http://vimeo.com/channels/31259/53576664', ['vimeo'])\n        self.assertMatch('http://vimeo.com/user7108434', ['vimeo:user'])\n        self.assertMatch('http://vimeo.com/user7108434/videos', ['vimeo:user'])\n        self.assertMatch('https://vimeo.com/user21297594/review/75524534/3c257a1b5d', ['vimeo:review'])",
        "begin_line": 123,
        "end_line": 129,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_all_urls.TestAllURLsMatching.test_soundcloud_not_matching_sets#132",
        "src_path": "test/test_all_urls.py",
        "class_name": "test.test_all_urls.TestAllURLsMatching",
        "signature": "test.test_all_urls.TestAllURLsMatching.test_soundcloud_not_matching_sets(self)",
        "snippet": "    def test_soundcloud_not_matching_sets(self):\n        self.assertMatch('http://soundcloud.com/floex/sets/gone-ep', ['soundcloud:set'])",
        "begin_line": 132,
        "end_line": 133,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_all_urls.TestAllURLsMatching.test_tumblr#135",
        "src_path": "test/test_all_urls.py",
        "class_name": "test.test_all_urls.TestAllURLsMatching",
        "signature": "test.test_all_urls.TestAllURLsMatching.test_tumblr(self)",
        "snippet": "    def test_tumblr(self):\n        self.assertMatch('http://tatianamaslanydaily.tumblr.com/post/54196191430/orphan-black-dvd-extra-behind-the-scenes', ['Tumblr'])\n        self.assertMatch('http://tatianamaslanydaily.tumblr.com/post/54196191430', ['Tumblr'])",
        "begin_line": 135,
        "end_line": 137,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_all_urls.TestAllURLsMatching.test_pbs#139",
        "src_path": "test/test_all_urls.py",
        "class_name": "test.test_all_urls.TestAllURLsMatching",
        "signature": "test.test_all_urls.TestAllURLsMatching.test_pbs(self)",
        "snippet": "    def test_pbs(self):\n        # https://github.com/rg3/youtube-dl/issues/2350\n        self.assertMatch('http://video.pbs.org/viralplayer/2365173446/', ['PBS'])\n        self.assertMatch('http://video.pbs.org/widget/partnerplayer/980042464/', ['PBS'])",
        "begin_line": 139,
        "end_line": 142,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_all_urls.TestAllURLsMatching.test_ComedyCentralShows#144",
        "src_path": "test/test_all_urls.py",
        "class_name": "test.test_all_urls.TestAllURLsMatching",
        "signature": "test.test_all_urls.TestAllURLsMatching.test_ComedyCentralShows(self)",
        "snippet": "    def test_ComedyCentralShows(self):\n        self.assertMatch(\n            'http://thedailyshow.cc.com/extended-interviews/xm3fnq/andrew-napolitano-extended-interview',\n            ['ComedyCentralShows'])\n        self.assertMatch(\n            'http://thecolbertreport.cc.com/videos/29w6fx/-realhumanpraise-for-fox-news',\n            ['ComedyCentralShows'])\n        self.assertMatch(\n            'http://thecolbertreport.cc.com/videos/gh6urb/neil-degrasse-tyson-pt--1?xrs=eml_col_031114',\n            ['ComedyCentralShows'])\n        self.assertMatch(\n            'http://thedailyshow.cc.com/guests/michael-lewis/3efna8/exclusive---michael-lewis-extended-interview-pt--3',\n            ['ComedyCentralShows'])\n        self.assertMatch(\n            'http://thedailyshow.cc.com/episodes/sy7yv0/april-8--2014---denis-leary',\n            ['ComedyCentralShows'])\n        self.assertMatch(\n            'http://thecolbertreport.cc.com/episodes/8ase07/april-8--2014---jane-goodall',\n            ['ComedyCentralShows'])\n        self.assertMatch(\n            'http://thedailyshow.cc.com/video-playlists/npde3s/the-daily-show-19088-highlights',\n            ['ComedyCentralShows'])\n        self.assertMatch(\n            'http://thedailyshow.cc.com/special-editions/2l8fdb/special-edition---a-look-back-at-food',\n            ['ComedyCentralShows'])",
        "begin_line": 144,
        "end_line": 168,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.test_all_urls.TestAllURLsMatching.test_yahoo_https#170",
        "src_path": "test/test_all_urls.py",
        "class_name": "test.test_all_urls.TestAllURLsMatching",
        "signature": "test.test_all_urls.TestAllURLsMatching.test_yahoo_https(self)",
        "snippet": "    def test_yahoo_https(self):\n        # https://github.com/rg3/youtube-dl/issues/2701\n        self.assertMatch(\n            'https://screen.yahoo.com/smartwatches-latest-wearable-gadgets-163745379-cbs.html',\n            ['Yahoo'])",
        "begin_line": 170,
        "end_line": 174,
        "comment": "",
        "is_bug": false
    }
]